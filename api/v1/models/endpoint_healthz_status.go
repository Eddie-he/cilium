// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EndpointHealthzStatus A common set of statuses for endpoint health
// swagger:model EndpointHealthzStatus

type EndpointHealthzStatus string

const (
	// EndpointHealthzStatusOK captures enum value "OK"
	EndpointHealthzStatusOK EndpointHealthzStatus = "OK"
	// EndpointHealthzStatusBootstrap captures enum value "Bootstrap"
	EndpointHealthzStatusBootstrap EndpointHealthzStatus = "Bootstrap"
	// EndpointHealthzStatusPending captures enum value "Pending"
	EndpointHealthzStatusPending EndpointHealthzStatus = "Pending"
	// EndpointHealthzStatusWarning captures enum value "Warning"
	EndpointHealthzStatusWarning EndpointHealthzStatus = "Warning"
	// EndpointHealthzStatusFailure captures enum value "Failure"
	EndpointHealthzStatusFailure EndpointHealthzStatus = "Failure"
	// EndpointHealthzStatusDisabled captures enum value "Disabled"
	EndpointHealthzStatusDisabled EndpointHealthzStatus = "Disabled"
)

// for schema
var endpointHealthzStatusEnum []interface{}

func init() {
	var res []EndpointHealthzStatus
	if err := json.Unmarshal([]byte(`["OK","Bootstrap","Pending","Warning","Failure","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointHealthzStatusEnum = append(endpointHealthzStatusEnum, v)
	}
}

func (m EndpointHealthzStatus) validateEndpointHealthzStatusEnum(path, location string, value EndpointHealthzStatus) error {
	if err := validate.Enum(path, location, value, endpointHealthzStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this endpoint healthz status
func (m EndpointHealthzStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEndpointHealthzStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
