// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// EndpointHealthz Health of the endpoint
// swagger:model EndpointHealthz

type EndpointHealthz struct {

	// bpf
	Bpf EndpointHealthzStatus `json:"bpf,omitempty"`

	// Is this endpoint reachable
	Connected bool `json:"connected,omitempty"`

	// health
	Health EndpointHealthzStatus `json:"health,omitempty"`

	// policy
	Policy EndpointHealthzStatus `json:"policy,omitempty"`
}

/* polymorph EndpointHealthz bpf false */

/* polymorph EndpointHealthz connected false */

/* polymorph EndpointHealthz health false */

/* polymorph EndpointHealthz policy false */

// Validate validates this endpoint healthz
func (m *EndpointHealthz) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBpf(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndpointHealthz) validateBpf(formats strfmt.Registry) error {

	if swag.IsZero(m.Bpf) { // not required
		return nil
	}

	if err := m.Bpf.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bpf")
		}
		return err
	}

	return nil
}

func (m *EndpointHealthz) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if err := m.Health.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("health")
		}
		return err
	}

	return nil
}

func (m *EndpointHealthz) validatePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if err := m.Policy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointHealthz) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointHealthz) UnmarshalBinary(b []byte) error {
	var res EndpointHealthz
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
